name: CI

on:
  push:
    branches:
      - 'main'
  pull_request: 
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/mikesmithgh/render.nvim:latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      #
      # - name: Log in to the Container registry
      #   uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.PACKAGE_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     flavor: |
      #       latest=true
      #     tags: |
      #        type=sha,format=long
      #        type=ref,event=branch
      #        type=ref,event=pr
      #        type=semver,pattern={{version}}
      #        type=semver,pattern={{major}}.{{minor}}
      #        type=semver,pattern={{major}}
      #
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      #   with:
      #     context: .
      #     # platforms: linux/amd64,linux/arm64
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}

      - run: |
          apt install sudo make -y

      - name: Setup Neovim nightly
        uses: rhysd/action-setup-vim@v1
        env:
          TMPDIR: /github/home/tmp
        with:
          neovim: true
          version: nightly

      - run: |
          # add comment to trigger CI
          set -x
          mkdir -p /github/home/.local/share/nvim/render/output/
          chmod -R 777 /github/home/.local/share/nvim/
          echo "stuff" > /github/home/.local/share/nvim/render/output/fake
          ls -la /github/home/.local/share/nvim/render/output/
          # apt install software-properties-common
          # add-apt-repository ppa:neovim-ppa/unstable
          # apt-get update
          # apt-get install neovim
          aha --version 
          npx playwright --version
          nvim --version
          pwd
          mkdir -p /github/home/.tmp
          mkdir -p /github/home/.local/share/nvim/render/output/
          mkdir -p /github/home/.local/share/nvim/site/pack/mikesmithgh/start/
          cp -r . /github/home/.local/share/nvim/site/pack/mikesmithgh/start/render.nvim/
          ls -la /github/home/.local/share/nvim/site/pack/mikesmithgh/start/render.nvim/
          ls -la /github/home/.local/share/nvim/site/pack/mikesmithgh/start/render.nvim/*
          mkdir -p /github/home/.local/state/nvim/shada/
          touch /github/home/.local/state/nvim/shada/main.shada
          # timeout 30 nvim -V9vim.log +'lua require("render").setup()' +'mode' +"lua if vim.fn.exists(':Render') > 0 then vim.cmd('Render') else vim.cmd('ls') end" +'sleep 5' +quit lua/render/init.lua || true
          # cat vim.log
          # ls -la /github/home/.local/share/nvim/render/output/
          # cat /github/home/.local/share/nvim/render/output/*
          nvim +'lua vim.api.nvim__screenshot("something.cat")' +'sleep 5' +'quit'
          ls -lart
          # nvim +'lua vim.api.nvim__screenshot("/github/home/.local/share/nvim/render/output/something.cat")' +'sleep 5' +'quit'
          # nvim +'lua vim.api.nvim__screenshot("/github/home/.local/share/nvim/render/output/something.cat")' +'sleep 5' +'quit'
          nvim +'autocmd! CursorHold * :call v:lua.vim.api.nvim__screenshot("/Users/mike/.local/share/nvim/render/output/something.cat") | :sleep 5 | :qall!'
          ls -lart /github/home/.local/share/nvim/render/output/
          set +x

      - name: Archive render output
        uses: actions/upload-artifact@v3
        with:
          name: render-output
          path: /github/home/.local/share/nvim/render/output/

      - name: Pushes to another repository
        uses: cpina/github-action-push-to-another-repository@main
        env:
          SSH_DEPLOY_KEY: ${{ secrets.RENDER_WIKI_DEPLOY_KEY }}
        with:
          source-directory: /github/home/.local/share/nvim/render/output/'
          destination-github-username: 'mikesmithgh'
          destination-repository-name: 'render.nvim.wiki'
          user-email: 'github-actions[bot]@users.noreply.github.com'
          user-name: 'github-actions[bot]'
          commit-message: 'chore(build): auto-generate wiki'
          target-branch: temp

